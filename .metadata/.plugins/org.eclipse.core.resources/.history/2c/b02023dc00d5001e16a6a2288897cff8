import java.io.IOException;
import java.util.*;

public class Backend implements BackendInterface
{
	private List<String> mostRecentRange;
	
	private int minSpeed;
	
	private IterableSortedCollection<SongInterface> tree;
	
	public Backend(IterableSortedCollection<SongInterface> tree) 
	{
		this.tree = tree; //set tree passed as parameter to tree used in object
		
		minSpeed = 0; //instantiate minSpeed
		
		mostRecentRange = new ArrayList<String>(); //instantiate list returned by getRange()
	}

	/**
     * Loads data from the .csv file referenced by filename.
     * @param filename is the name of the csv file to load data from
     * @throws IOException when there is trouble finding/reading file
     */
	@Override
	public void readData(String filename) throws IOException {
		// TODO Auto-generated method stub
		
	}

	/**
     * Retrieves a list of song titles for songs that have a Danceability
     * within the specified range (sorted by Danceability in ascending order).
     * If a minSpeed filter has been set using filterFastSongs(), then only 
     * songs with speed greater than or equal to that minSpeed should be 
     * included in the list returned by this method.
     * Note that either this danceability range, or the resulting unfiltered 
     * list of songs should be saved for later use by the other methods 
     * defined in this class.
     *
     * @param low is the minimum danceability of songs in the returned list
     * @param hight is the maximum danceability of songs in the returned list
     * @return List of titles for all songs in specified range 
     */
	@Override
	public List<String> getRange(int low, int high) 
	{
		//clear list if previously called
		if(!mostRecentRange.isEmpty()) 
		{
			mostRecentRange.clear(); 
		}
		
		//iterate through tree to find songs in range
        for (SongInterface song : tree) {
            if (song.getDanceability() >= low && song.getDanceability() <= high) {
                mostRecentRange.add(song.getTitle()); //add songs to list
            }
        }
        return mostRecentRange; //return list as field to be used by other methods
	}

	/**
     * Filters the list of songs returned by future calls of getRange() and 
     * fiveMostEnergetic() to only include Fast songs.  If getRange() was 
     * previously called, then this method will return a list of song titles
     * (sorted in ascending order by Danceability) that only includes songs 
     * that as fast or faster than minSpeed.  If getRange() was not previusly
     * called, then this method should return an empty list.
     *
     * Note that this minSpeed threshold should be saved for later use by the 
     * other methods defined in this class.
     *
     * @param minSpeed is the minimum speed in bpm of returned songs
     * @return List of song titles, empty if getRange was not previously called
     */
	@Override
	public List<String> filterFastSongs(int minSpeed) {
		this.minSpeed = minSpeed;
		List<String> fastSongs = new ArrayList<String>();
		if(mostRecentRange.isEmpty())
		{
			return fastSongs;
		}
		for (SongInterface song : tree) {
            if (song.getBPM() >= minSpeed) {
                // Add song title to the result list
                fastSongs.add(song.getTitle());
            }
        }
		return fastSongs;
	}

	/**
     * This method makes use of the attribute range specified by the most
     * recent call to getRange().  If a minSpeed threshold has been set by
     * filterFastSongs() then that will also be utilized by this method.
     * Of those songs that match these criteria, the five most energetic will
     * be  returned by this method as a List of Strings in increasing order of 
     * danceability.  Each string contains the energy rating followed by a 
     * colon, a space, and then the song's title.
     * If fewer than five such songs exist, display all of them.
     *
     * @return List of five most energetic song titles and their energies
     * @throws IllegalStateException when getRange() was not previously called.
     */
	@Override
	public List<String> fiveMostEnergetic() {
		
		List<SongInterface> mostEnergy = new ArrayList<SongInterface>();
		
		if (mostRecentRange.isEmpty()) {
            throw new IllegalStateException("getRange() must be called before fiveMostEnergetic()");
        }
		
		if(minSpeed != 0)
		{
			for (SongInterface song : tree) 
			{
	            //filter songs given minSpeed
	            if (song.getBPM() >= minSpeed && mostRecentRange.contains(song.getTitle())) 
	            {
	                mostEnergy.add(song);
	            }
	        }
			for (int i = 0; i < mostEnergy.size() - 1; i++) 
			{
			    for (int j = i + 1; j < mostEnergy.size(); j++) 
			    {
			        // Compare energy values of songs at index i and j
			        int energyComparison = Integer.compare(mostEnergy.get(i).getEnergy(), 
			        		mostEnergy.get(j).getEnergy());
			        if (energyComparison > 0) 
			        {
			            // Swap songs if the energy of song at index i 
			        	//is greater than the energy of song at index j
			            SongInterface k = mostEnergy.get(i);
			            mostEnergy.set(i, mostEnergy.get(j));
			            mostEnergy.set(j, k);
			        }
			    }
			}
			List<String> result = new ArrayList<>();
	        int count = Math.min(5, mostEnergy.size());
	        for (int i = 0; i < count; i++) {
	            SongInterface song = mostEnergy.get(i);
	            result.add(song.getEnergy() + ": " + song.getTitle());
	        }

	        return result;
		}
		return null;
	}

}
